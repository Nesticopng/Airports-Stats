import streamlit as st
from utils.database import obtener_datos
import plotly.express as px
import plotly.graph_objects as go
from scipy import stats
import numpy as np

# Configurar la p√°gina
st.set_page_config(
    page_title="Estad√≠sticas Descriptivas de Pasajeros por Aeropuerto",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.title("üìä Estad√≠sticas Descriptivas de Pasajeros por Aeropuerto")
st.markdown("---")
st.markdown("An√°lisis estad√≠stico del n√∫mero de pasajeros en aeropuertos de EE.UU. para los a√±os 2022 y 2023")

# Obtener datos
with st.spinner("Cargando datos..."):
    df_total = obtener_datos('total')
    df_domestic = obtener_datos('domestic')
    df_international = obtener_datos('international')

# Verificar que los datos se cargaron correctamente
if df_total.empty or df_domestic.empty or df_international.empty:
    st.error("‚ùå No se pudieron cargar los datos. Verifica la conexi√≥n a la base de datos.")
    st.stop()

# Convertir columnas a string para evitar errores
df_total['airport'] = df_total['airport'].astype(str)
df_domestic['airport'] = df_domestic['airport'].astype(str)
df_international['airport'] = df_international['airport'].astype(str)

# Sidebar para selecci√≥n de tipo de flujo
st.sidebar.header("üîß Configuraci√≥n del An√°lisis")

tipo_flujo = st.sidebar.selectbox(
    "Selecciona el tipo de flujo:",
    options=['total', 'domestic', 'international'],
    format_func=lambda x: x.capitalize(),
    help="Selecciona si quieres analizar el flujo total, dom√©stico o internacional"
)

# Funci√≥n para calcular estad√≠sticas descriptivas
def calcular_estadisticas_descriptivas(df, columnas_pasajeros, tipo_flujo):
    """
    Calcula estad√≠sticas descriptivas para las columnas de pasajeros especificadas
    """
    estadisticas = {}
    
    for col in columnas_pasajeros:
        if col in df.columns:
            # Filtrar valores nulos y negativos
            datos_limpios = df[col].dropna()
            datos_limpios = datos_limpios[datos_limpios >= 0]
            
            if len(datos_limpios) > 0:
                estadisticas[col] = {
                    'count': len(datos_limpios),
                    'mean': datos_limpios.mean(),
                    'median': datos_limpios.median(),
                    'std': datos_limpios.std(),
                    'min': datos_limpios.min(),
                    'max': datos_limpios.max(),
                    'q25': datos_limpios.quantile(0.25),
                    'q75': datos_limpios.quantile(0.75),
                    'skewness': datos_limpios.skew(),
                    'kurtosis': datos_limpios.kurtosis()
                }
    
    return estadisticas

# Funci√≥n para crear visualizaciones
def crear_visualizaciones(df, columnas_pasajeros, tipo_flujo):
    """
    Crea visualizaciones para las estad√≠sticas descriptivas
    """
    visualizaciones = {}
    
    for col in columnas_pasajeros:
        if col in df.columns:
            # Filtrar datos
            datos_limpios = df[col].dropna()
            datos_limpios = datos_limpios[datos_limpios >= 0]
            
            if len(datos_limpios) > 0:
                # Histograma
                a√±o = "2023" if "2023" in col else "2022"
                fig_hist = px.histogram(
                    x=datos_limpios,
                    nbins=50,
                    title=f'Distribuci√≥n de Pasajeros Embarcados en {a√±o}',
                    labels={'x': 'Pasajeros Embarcados', 'y': 'Frecuencia'},
                    color_discrete_sequence=['#1f77b4']
                )
                fig_hist.update_layout(
                    xaxis_title='Pasajeros Embarcados',
                    yaxis_title='Frecuencia',
                    showlegend=False
                )
                visualizaciones[f'hist_{col}'] = fig_hist
                
                # Box plot
                a√±o = "2023" if "2023" in col else "2022"
                fig_box = px.box(
                    y=datos_limpios,
                    title=f'Box Plot de Pasajeros Embarcados en {a√±o}',
                    labels={'y': 'Pasajeros Embarcados'},
                    color_discrete_sequence=['#ff7f0e']
                )
                fig_box.update_layout(
                    yaxis_title='Pasajeros Embarcados',
                    showlegend=False
                )
                visualizaciones[f'box_{col}'] = fig_box
                
                fig_qq = go.Figure()
                
                # Calcular percentiles te√≥ricos y muestrales
                n = len(datos_limpios)
                percentiles_teoricos = np.linspace(0.01, 0.99, n)
                percentiles_muestrales = np.percentile(datos_limpios, percentiles_teoricos * 100)
                percentiles_normales = stats.norm.ppf(percentiles_teoricos, 
                                                    loc=np.mean(datos_limpios), 
                                                    scale=np.std(datos_limpios))
                
                # Agregar l√≠nea de referencia (distribuci√≥n normal)
                fig_qq.add_trace(go.Scatter(
                    x=percentiles_normales,
                    y=percentiles_muestrales,
                    mode='markers',
                    name='Datos vs Normal',
                    marker=dict(color='#e74c3c', size=6)
                ))
                
                # L√≠nea de referencia perfecta
                min_val = min(percentiles_normales.min(), percentiles_muestrales.min())
                max_val = max(percentiles_normales.max(), percentiles_muestrales.max())
                fig_qq.add_trace(go.Scatter(
                    x=[min_val, max_val],
                    y=[min_val, max_val],
                    mode='lines',
                    name='L√≠nea de Referencia',
                    line=dict(color='#2c3e50', dash='dash')
                ))
                
                fig_qq.update_layout(
                    title=f'An√°lisis de Asimetr√≠a en {a√±o}',
                    xaxis_title='Cuantiles Te√≥ricos (Normal)',
                    yaxis_title='Cuantiles Muestrales',
                    showlegend=True
                )
                visualizaciones[f'qq_{col}'] = fig_qq
                
                # Gr√°fica de Curtosis (Histograma con curva normal superpuesta)
                fig_kurt = px.histogram(
                    x=datos_limpios,
                    nbins=50,
                    title=f'An√°lisis de Curtosis - Distribuci√≥n vs Normal en {a√±o}',
                    labels={'x': 'Pasajeros Embarcados', 'y': 'Densidad'},
                    color_discrete_sequence=['#9b59b6'],
                    histnorm='probability density'
                )
                
                # Agregar curva normal te√≥rica
                x_range = np.linspace(datos_limpios.min(), datos_limpios.max(), 100)
                normal_curve = stats.norm.pdf(x_range, 
                                            loc=np.mean(datos_limpios), 
                                            scale=np.std(datos_limpios))
                
                fig_kurt.add_trace(go.Scatter(
                    x=x_range,
                    y=normal_curve,
                    mode='lines',
                    name='Distribuci√≥n Normal Te√≥rica',
                    line=dict(color='#e67e22', width=3)
                ))
                
                fig_kurt.update_layout(
                    xaxis_title='Pasajeros Embarcados',
                    yaxis_title='Densidad de Probabilidad',
                    showlegend=True
                )
                visualizaciones[f'kurt_{col}'] = fig_kurt
    
    return visualizaciones

# Determinar columnas seg√∫n el tipo de flujo
if tipo_flujo == 'total':
    df_analisis = df_total
    columnas_pasajeros = ['2023_enplaned_passengers_total', '2022_enplaned_passengers_total']
    titulo_analisis = "Total de Pasajeros"
elif tipo_flujo == 'domestic':
    df_analisis = df_domestic
    columnas_pasajeros = ['2023_enplaned_passengers_dom', '2022_enplaned_passengers_dom']
    titulo_analisis = "Pasajeros Dom√©sticos"
else:  # international
    df_analisis = df_international
    columnas_pasajeros = ['2023_enplaned_passengers_inter', '2022_enplaned_passengers_inter']
    titulo_analisis = "Pasajeros Internacionales"

# Calcular estad√≠sticas descriptivas
estadisticas = calcular_estadisticas_descriptivas(df_analisis, columnas_pasajeros, tipo_flujo)

# Mostrar resumen general
st.subheader(f"üìà Resumen General - {titulo_analisis}")

col1, col2, col3, col4 = st.columns(4)

if '2023_enplaned_passengers_total' in estadisticas or '2023_enplaned_passengers_dom' in estadisticas or '2023_enplaned_passengers_inter' in estadisticas:
    col_2023 = [col for col in columnas_pasajeros if '2023' in col][0]
    col_2022 = [col for col in columnas_pasajeros if '2022' in col][0]
    
    with col1:
        st.metric(
            "Total Aeropuertos",
            len(df_analisis),
            help="N√∫mero total de aeropuertos en el an√°lisis"
        )
    
    with col2:
        if col_2023 in estadisticas:
            total_2023 = df_analisis[col_2023].sum()
            st.metric(
                "Total Pasajeros 2023",
                f"{total_2023:,.0f}",
                help="Suma total de pasajeros en 2023"
            )
    
    with col3:
        if col_2022 in estadisticas:
            total_2022 = df_analisis[col_2022].sum()
            st.metric(
                "Total Pasajeros 2022",
                f"{total_2022:,.0f}",
                help="Suma total de pasajeros en 2022"
            )
    
    with col4:
        if col_2023 in estadisticas and col_2022 in estadisticas:
            crecimiento = ((total_2023 - total_2022) / total_2022) * 100
            st.metric(
                "Crecimiento %",
                f"{crecimiento:.2f}%",
                delta=f"{crecimiento:.2f}%",
                help="Porcentaje de crecimiento entre 2022 y 2023"
            )

st.markdown("---")

# Dashboard de estad√≠sticas descriptivas
st.markdown("## üìä Dashboard Estad√≠stico")

# CSS personalizado para cards con bordes redondeados y sombra
st.markdown("""
<style>
.metric-card {
    background: #344168;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin: 10px 0;
    border: 1px solid #050C24;
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.metric-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
}

.metric-title {
    font-size: 14px;
    font-weight: 600;
    color: #ffffff;
    margin-bottom: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.metric-value {
    font-size: 28px;
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 4px;
}

.metric-description {
    font-size: 12px;
    color: #ffffff;
    margin-top: 4px;
}
</style>
""", unsafe_allow_html=True)

# Funci√≥n para crear cards personalizados
def crear_metric_card(titulo, valor, descripcion=""):
    return f"""
    <div class="metric-card">
        <div class="metric-title">{titulo}</div>
        <div class="metric-value">{valor}</div>
        <div class="metric-description">{descripcion}</div>
    </div>
    """

# Crear tabs para cada a√±o
if len(columnas_pasajeros) == 2:
    tab_2023, tab_2022 = st.tabs(["üìà 2023", "üìà 2022"])
    
    col_2023 = columnas_pasajeros[0] if "2023" in columnas_pasajeros[0] else columnas_pasajeros[1]
    col_2022 = columnas_pasajeros[1] if "2023" in columnas_pasajeros[0] else columnas_pasajeros[0]
    
    with tab_2023:
        if col_2023 in estadisticas:
            st.markdown("### Estad√≠sticas Descriptivas 2023")
            
            # Primera fila de m√©tricas principales
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(crear_metric_card(
                    "Media",
                    f"{estadisticas[col_2023]['mean']:,.0f}",
                    "Promedio aritm√©tico"
                ), unsafe_allow_html=True)
            
            with col2:
                st.markdown(crear_metric_card(
                    "Mediana",
                    f"{estadisticas[col_2023]['median']:,.0f}",
                    "Valor central"
                ), unsafe_allow_html=True)
            
            with col3:
                st.markdown(crear_metric_card(
                    "Desv. Est√°ndar",
                    f"{estadisticas[col_2023]['std']:,.0f}",
                    "Dispersi√≥n de datos"
                ), unsafe_allow_html=True)
            
            with col4:
                st.markdown(crear_metric_card(
                    "Rango",
                    f"{estadisticas[col_2023]['max'] - estadisticas[col_2023]['min']:,.0f}",
                    "Diferencia min-max"
                ), unsafe_allow_html=True)
            
            # Segunda fila de m√©tricas adicionales
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(crear_metric_card(
                    "M√≠nimo",
                    f"{estadisticas[col_2023]['min']:,.0f}",
                    "Valor m√°s bajo"
                ), unsafe_allow_html=True)
            
            with col2:
                st.markdown(crear_metric_card(
                    "M√°ximo",
                    f"{estadisticas[col_2023]['max']:,.0f}",
                    "Valor m√°s alto"
                ), unsafe_allow_html=True)
            
            with col3:
                st.markdown(crear_metric_card(
                    "Q1 (25%)",
                    f"{estadisticas[col_2023]['q25']:,.0f}",
                    "Primer cuartil"
                ), unsafe_allow_html=True)
            
            with col4:
                st.markdown(crear_metric_card(
                    "Q3 (75%)",
                    f"{estadisticas[col_2023]['q75']:,.0f}",
                    "Tercer cuartil"
                ), unsafe_allow_html=True)
            
            # Tercera fila para m√©tricas de forma
            col1, col2 = st.columns(2)
            
            with col1:
                skew_val = estadisticas[col_2023]['skewness']
                skew_interpretation = "Sesgada a la derecha" if skew_val > 0.5 else "Sesgada a la izquierda" if skew_val < -0.5 else "Sim√©trica"
                st.markdown(crear_metric_card(
                    "Asimetr√≠a",
                    f"{skew_val:.3f}",
                    skew_interpretation
                ), unsafe_allow_html=True)
            
            with col2:
                kurt_val = estadisticas[col_2023]['kurtosis']
                kurt_interpretation = "M√°s puntiaguda que la normal" if kurt_val > 0 else "M√°s plana que la normal" if kurt_val < 0 else "Similar a la normal"
                st.markdown(crear_metric_card(
                    "Curtosis",
                    f"{kurt_val:.3f}",
                    kurt_interpretation
                ), unsafe_allow_html=True)
    
    with tab_2022:
        if col_2022 in estadisticas:
            st.markdown("### Estad√≠sticas Descriptivas 2022")
            
            # Primera fila de m√©tricas principales
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(crear_metric_card(
                    "Media",
                    f"{estadisticas[col_2022]['mean']:,.0f}",
                    "Promedio aritm√©tico"
                ), unsafe_allow_html=True)
            
            with col2:
                st.markdown(crear_metric_card(
                    "Mediana",
                    f"{estadisticas[col_2022]['median']:,.0f}",
                    "Valor central"
                ), unsafe_allow_html=True)
            
            with col3:
                st.markdown(crear_metric_card(
                    "Desv. Est√°ndar",
                    f"{estadisticas[col_2022]['std']:,.0f}",
                    "Dispersi√≥n de datos"
                ), unsafe_allow_html=True)
            
            with col4:
                st.markdown(crear_metric_card(
                    "Rango",
                    f"{estadisticas[col_2022]['max'] - estadisticas[col_2022]['min']:,.0f}",
                    "Diferencia min-max"
                ), unsafe_allow_html=True)
            
            # Segunda fila de m√©tricas adicionales
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(crear_metric_card(
                    "M√≠nimo",
                    f"{estadisticas[col_2022]['min']:,.0f}",
                    "Valor m√°s bajo"
                ), unsafe_allow_html=True)
            
            with col2:
                st.markdown(crear_metric_card(
                    "M√°ximo",
                    f"{estadisticas[col_2022]['max']:,.0f}",
                    "Valor m√°s alto"
                ), unsafe_allow_html=True)
            
            with col3:
                st.markdown(crear_metric_card(
                    "Q1 (25%)",
                    f"{estadisticas[col_2022]['q25']:,.0f}",
                    "Primer cuartil"
                ), unsafe_allow_html=True)
            
            with col4:
                st.markdown(crear_metric_card(
                    "Q3 (75%)",
                    f"{estadisticas[col_2022]['q75']:,.0f}",
                    "Tercer cuartil"
                ), unsafe_allow_html=True)
            
            # Tercera fila para m√©tricas de forma
            col1, col2 = st.columns(2)
            
            with col1:
                skew_val = estadisticas[col_2022]['skewness']
                skew_interpretation = "Sesgada a la derecha" if skew_val > 0.5 else "Sesgada a la izquierda" if skew_val < -0.5 else "Sim√©trica"
                st.markdown(crear_metric_card(
                    "Asimetr√≠a",
                    f"{skew_val:.3f}",
                    skew_interpretation
                ), unsafe_allow_html=True)
            
            with col2:
                kurt_val = estadisticas[col_2022]['kurtosis']
                kurt_interpretation = "M√°s puntiaguda que la normal" if kurt_val > 0 else "M√°s plana que la normal" if kurt_val < 0 else "Similar a la normal"
                st.markdown(crear_metric_card(
                    "Curtosis",
                    f"{kurt_val:.3f}",
                    kurt_interpretation
                ), unsafe_allow_html=True)

# Crear visualizaciones
st.subheader("üìà Visualizaciones")

visualizaciones = crear_visualizaciones(df_analisis, columnas_pasajeros, tipo_flujo)

# Mostrar histogramas
st.markdown("### Distribuciones de Frecuencia")
for col in columnas_pasajeros:
    if f'hist_{col}' in visualizaciones:
        a√±o = "2023" if "2023" in col else "2022"
        st.plotly_chart(visualizaciones[f'hist_{col}'], use_container_width=True)

# Mostrar box plots
st.markdown("### An√°lisis de Cajas (Box Plots)")
for col in columnas_pasajeros:
    if f'box_{col}' in visualizaciones:
        a√±o = "2023" if "2023" in col else "2022"
        st.plotly_chart(visualizaciones[f'box_{col}'], use_container_width=True)

# Mostrar gr√°ficas de asimetr√≠a y curtosis
st.markdown("### An√°lisis de Forma de la Distribuci√≥n")

# Crear tabs para asimetr√≠a y curtosis
tab_asimetria, tab_curtosis = st.tabs(["üìê An√°lisis de Asimetr√≠a", "üìä An√°lisis de Curtosis"])

with tab_asimetria:
    st.markdown("""
    **An√°lisis de Asimetr√≠a**
    
    Esta gr√°fica compara los cuantiles de los datos con los de una distribuci√≥n normal te√≥rica:
    - **Puntos cerca de la l√≠nea diagonal**: Los datos siguen una distribuci√≥n normal
    - **Puntos por encima de la l√≠nea**: Valores m√°s altos de lo esperado (cola derecha)
    - **Puntos por debajo de la l√≠nea**: Valores m√°s bajos de lo esperado (cola izquierda)
    """)
    
    for col in columnas_pasajeros:
        if f'qq_{col}' in visualizaciones:
            a√±o = "2023" if "2023" in col else "2022"
            st.plotly_chart(visualizaciones[f'qq_{col}'], use_container_width=True)

with tab_curtosis:
    st.markdown("""
    **An√°lisis de Curtosis**
    
    Esta gr√°fica compara la distribuci√≥n real con una distribuci√≥n normal te√≥rica:
    - **Curtosis > 0**: Distribuci√≥n m√°s puntiaguda que la normal (leptoc√∫rtica)
    - **Curtosis < 0**: Distribuci√≥n m√°s plana que la normal (platic√∫rtica)
    - **Curtosis ‚âà 0**: Similar a la distribuci√≥n normal (mesoc√∫rtica)
    """)
    
    for col in columnas_pasajeros:
        if f'kurt_{col}' in visualizaciones:
            a√±o = "2023" if "2023" in col else "2022"
            st.plotly_chart(visualizaciones[f'kurt_{col}'], use_container_width=True)

# Comparaci√≥n entre a√±os
if len(columnas_pasajeros) == 2:
    st.subheader("üîÑ Comparaci√≥n entre A√±os")
    
    col_2023 = columnas_pasajeros[0] if "2023" in columnas_pasajeros[0] else columnas_pasajeros[1]
    col_2022 = columnas_pasajeros[1] if "2023" in columnas_pasajeros[0] else columnas_pasajeros[0]
    
    if col_2023 in df_analisis.columns and col_2022 in df_analisis.columns:
        # Crear DataFrame para comparaci√≥n
        df_comparacion = df_analisis[[col_2023, col_2022]].copy()
        df_comparacion = df_comparacion.dropna()
        df_comparacion = df_comparacion[(df_comparacion[col_2023] >= 0) & (df_comparacion[col_2022] >= 0)]
        
        if len(df_comparacion) > 0:
            # Scatter plot de comparaci√≥n
            fig_scatter = px.scatter(
                df_comparacion,
                x=col_2022,
                y=col_2023,
                title=f'Comparaci√≥n de Pasajeros: 2022 vs 2023 - {tipo_flujo.capitalize()}',
                labels={
                    col_2022: 'Pasajeros 2022',
                    col_2023: 'Pasajeros 2023'
                },
                color_discrete_sequence=['#2ca02c']
            )
            
            # Agregar l√≠nea de referencia (y = x)
            max_val = max(df_comparacion[col_2022].max(), df_comparacion[col_2023].max())
            fig_scatter.add_trace(
                go.Scatter(
                    x=[0, max_val],
                    y=[0, max_val],
                    mode='lines',
                    name='L√≠nea de igualdad (y=x)',
                    line=dict(dash='dash', color='red')
                )
            )
            
            fig_scatter.update_layout(
                xaxis_title='Pasajeros 2022',
                yaxis_title='Pasajeros 2023',
                showlegend=True
            )
            
            st.plotly_chart(fig_scatter, use_container_width=True)
            
            # Calcular correlaci√≥n
            correlacion = df_comparacion[col_2022].corr(df_comparacion[col_2023])
            st.metric(
                "Correlaci√≥n entre 2022 y 2023",
                f"{correlacion:.4f}",
                help="Correlaci√≥n de Pearson entre los datos de 2022 y 2023"
            )

# Informaci√≥n adicional
st.markdown("---")
st.markdown("### ‚ÑπÔ∏è Informaci√≥n sobre las M√©tricas")

with st.expander("Explicaci√≥n de las estad√≠sticas descriptivas"):
    st.markdown("""
    **Estad√≠sticas Descriptivas:**
    - **Conteo**: N√∫mero de aeropuertos con datos v√°lidos
    - **Media**: Promedio aritm√©tico de pasajeros
    - **Mediana**: Valor que divide los datos en dos mitades iguales
    - **Desviaci√≥n Est√°ndar**: Medida de dispersi√≥n de los datos
    - **M√≠nimo/M√°ximo**: Valores extremos
    - **Q1/Q3**: Primer y tercer cuartil (25% y 75% de los datos)
    - **Asimetr√≠a**: Medida de la simetr√≠a de la distribuci√≥n
    - **Curtosis**: Medida de la "pesadez" de las colas de la distribuci√≥n
    
    **Interpretaci√≥n:**
    - **Asimetr√≠a > 0**: Distribuci√≥n sesgada a la derecha (m√°s valores altos)
    - **Asimetr√≠a < 0**: Distribuci√≥n sesgada a la izquierda (m√°s valores bajos)
    - **Curtosis > 0**: Distribuci√≥n m√°s "puntiaguda" que la normal
    - **Curtosis < 0**: Distribuci√≥n m√°s "plana" que la normal
    """)

st.markdown("---")
st.markdown("üìä **An√°lisis Estad√≠stico de Tr√°fico A√©reo en EE.UU. 2022-2023** - Grupo 5 (Computaci√≥n 2) - Universidad Central de Venezuela")
